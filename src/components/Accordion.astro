---
type Props = {
  index: number;
  title: string;
  description: string;
  pic: string;
  steps: string;
};

const { index, title, description, pic, steps } = Astro.props;
---

<div
  id="accordion__item"
  class="accordion__item group h-auto md:h-[160px] bg-zinc-100 overflow-hidden w-full transition-all duration-500 mb-[30px] rounded-[45px] border border-dark shadow-[0px_5px_0px_#191a23]"
>
  <button
    class="accordion__toggle w-full h-auto md:h-[160px] flex flex-col md:flex-row items-center justify-between p-5 md:p-[60px] cursor-pointer"
    id={`${title} accordion__item menu button`}
    aria-expanded="false"
    aria-controls={`${title} accordion__item menu content`}
  > 
    <!-- Title and Index -->
    <div class="flex flex-col md:flex-row items-center gap-5 md:gap-[25px]">
      <span class="text-4xl sm:text-6xl hidden sm:block">0{index}</span>
      <div class="text-xl md:text-2xl font-bold text-center md:text-left">{title}</div>
    </div>

    <!-- Accordion Icon -->
    <div class="bg-white w-12 md:w-[58px] h-12 md:h-[58px] flex justify-center items-center rounded-full border border-dark mt-4 md:mt-0">
      <div class="accordion__icon h-8 md:h-10 w-8 md:w-10 transition-transform duration-300 flex justify-center items-center relative" aria-hidden="true">
      </div>
    </div>
  </button>

  <!-- Accordion Content -->
  <div
    id={`${title} accordion__item menu content`}
    aria-labelledby={`${title} accordion__item menu button`}
    class="accordion__content px-5 md:px-[60px] pt-5 md:pt-0"
  >
    <div class="flex flex-col md:flex-row items-center justify-bottom gap-5 md:gap-[20px]">
      <!-- Image Section -->
      <div class="flex h-full md:h-[auto] items-center justify-center">
        <img src={pic} alt={pic} class="flex w-full md:w-[auto]"/>
      </div>

      <!-- Description and Steps Section -->
      <div class="flex flex-col justify-center items-center w-full md:w-1/2 gap-4 md:gap-[30px] border rounded-xl px-4 py-6 md:px-5 md:py-8 my-5 bg-zinc-100">
        <div class="text-lg md:text-xl font-medium text-center md:text-left">{description}</div>
        <div class="flex justify-center items-center w-full md:w-[450px]">
          <img src={steps} alt={steps} class="w-[90%] md:w-auto h-auto" />
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function accordionSetup() {
    const accordionItems = document.querySelectorAll(
      ".accordion__item"
    ) as NodeListOf<HTMLElement>;

    accordionItems.forEach((accordionItem) => {
      const accordionToggle = accordionItem.querySelector(".accordion__toggle");
      const accordionIcon = accordionItem.querySelector(".accordion__icon");

      if (accordionToggle && accordionIcon) {
        accordionToggle.addEventListener("click", (e) => {
          e.stopPropagation(); // prevent the event from bubbling up to the document

          // Close other accordion items
          accordionItems.forEach((otherAccordionItem) => {
            if (
              otherAccordionItem !== accordionItem &&
              otherAccordionItem.classList.contains("active")
            ) {
              const otherAccordionToggle =
                otherAccordionItem.querySelector(".accordion__toggle");
              const otherAccordionIcon =
                otherAccordionItem.querySelector(".accordion__icon");

              if (otherAccordionToggle && otherAccordionIcon) {
                otherAccordionItem.classList.remove("active");
                otherAccordionItem.classList.remove("bg-light_blue");
                otherAccordionToggle.setAttribute("aria-expanded", "false");
                otherAccordionItem.style.height = "160px";
                otherAccordionIcon.classList.remove("rotate-180");
                otherAccordionIcon.classList.remove("collapsed");
              }
            }
          });

          // Close itself if it's open, otherwise open it
          if (!accordionItem.classList.contains("active")) {
            accordionItem.classList.add("active");
            accordionToggle.setAttribute("aria-expanded", "true");

            // Set height according to content
            accordionItem.style.height = accordionItem.scrollHeight + "px";
            accordionItem.classList.add("bg-light_blue");
            accordionIcon.classList.add("rotate-180");
            accordionIcon.classList.add("collapsed");
          } else {
            accordionItem.classList.remove("active");
            accordionToggle.setAttribute("aria-expanded", "false");

            // Reset height. Accordion Items have Overflow hidden so when it's
            // height is 60, because the toggle's height is 60, the content is hidden
            accordionItem.style.height = "160px";
            accordionIcon.classList.remove("rotate-180");
            accordionItem.classList.remove("bg-light_blue");
            accordionIcon.classList.remove("collapsed");
          }

          e.preventDefault();
          return false;
        });
      }
    });

    // Close the accordion when clicking outside of it
    document.addEventListener("click", (event) => {
      accordionItems.forEach((accordionItem) => {
        const accordionToggle =
          accordionItem.querySelector(".accordion__toggle");
        const accordionIcon = accordionItem.querySelector(".accordion__icon");

        if (
          accordionToggle &&
          accordionIcon &&
          !accordionItem.contains(event.target as Node)
        ) {
          accordionItem.classList.remove("active");
          accordionItem.classList.remove("bg-light_blue");
          accordionToggle.setAttribute("aria-expanded", "false");

          // Reset height. Overflow gets hidden
          accordionItem.style.height = "160px";
          accordionIcon.classList.remove("rotate-180");
          accordionIcon.classList.remove("collapsed");
        }
      });
    });
  }

  // Run on page swap
  accordionSetup();
  document.addEventListener("astro:after-swap", accordionSetup);
</script>